
/*---------------------------------------------------------------------kewords.h
 * Copyright 2012-2018 Donald Delmar Davis, Suspect Devices. All Rights Reserved
 *
 * !!!!!!!!!!!! ..... This may or may not be free software ..... !!!!!!!!!!!!!!!
 *
 * This file is autogenerated and while created by and needed for several open
 * source modules the vocabulary is specific to the project and the routines
 * referenced will be liscenced on a per project basis
 *----------------------------------------------------------------------------*/

/*----------------------------- Monitor keywords--------------------------------
* The idea here is to create an automation freindly monitor protocol and debug
* interfacse. Because this needs to be efficient (and flexible) I have chosen a
* very simple interface which will access and may manipulate the devices public
* variables.
*
* Basic Syntax for the monitor is
* XXX[?!:] <variable stuff> <CR>
* where:
* XXX is a 3 letter command or variable.
* ! execute command or store value
* ? request a value
* : value sent as a response or an update.
* simple example
* (reboot device)
* RST!
* (set red led value)
* RED!255
* RED:255
* (request pressure sensor, recieve sensor value
*  note: unsolicited temperature sensor update )
* PS1?
* PS1:1240.2
* TS1:150.5
*
*/
#ifndef keywords_h
#define keywords_h


#define HELPTEXT\
"SYN[!  ]sync (hello)    "\
"ACK[ : ]acknowlege(yes) "\
"NAK[ : ]negative (no)   "\
"SWV[ :?]Software Vers.  "\
"HWV[ :?]Hardware Vers.  "\
"GIT[ :?]GIT Repo Vers.  "\
"MEM[ :?]Avaliable Mem.  "\
"SSN[ :?]Unit Serial No. "\
"HLP[ :?]help            "\
"FTL[!: ]Fatal Error     "\
"ALT[!: ]Alert           "\
"WAR[!: ]Warning         "\
"INF[!: ]Info            "\
"DBG[!: ]Debugging Info  "\
"LOG[!: ]Log             "\
"STC[!:?]State Change    "\
"DVL[!:?]Display Level   "\
"LVL[!:?]Log Level       "\
"RST[!  ]Reboot          "\
"BLD[!  ]Reboot to loader"\
"STP[!:?]Sim/Chk  E-Stop "\
"LCS[!:?]Light Curt. Stop"\
"LCR[!: ]Light Curt. Rst "\
"NOW[!:?]Time as an int  "\
"TIM[!:?]Time for humans "\
"TS1[ :?]Temp Sensor 1   "\
"TS2[ :?]Temp Sensor 2   "\
"TMP[ :?]Temp Setting    "\
"AMT[ :?]Ambient Temp    "\
"AMH[ :?]Ambient Humidity"\
"RED[!: ]Led (0-255)     "\
"HSW[!:?]Heaters (ON/OFF)"\
"H1S[!:?]Heater 1(ON/OFF)"\
"H1V[!:?]Heater 1 (0-255)"\
"H1P[!:?]Heater 1 P value"\
"H1I[!:?]Heater 1 I value"\
"H1D[!:?]Heater 1 D value"\
"H2S[!:?]Heater 1(ON/OFF)"\
"H2V[!:?]Heater 1 (0-255)"\
"H2P[!:?]Heater 2 P value"\
"H2I[!:?]Heater 2 I value"\
"H2D[!:?]Heater 2 D value"\
"PMS[!:?]Pump Sw (ON/OFF)"\
"PSP[ :?]Pressure P value"\
"PSI[ :?]Pressure I value"\
"PSD[ :?]Pressure D value"\
"PS1[ :?]Pressure Sensor "\
"MUP[!: ]Manual up       "\
"MDN[!: ]Manual down     "\
"TMS[!:?]Timer setting   "\
"TMR[!:?]Timer Run(ON/OF)"\
"TRM[ :?]Time Remaining  "\
"SOL[!:?]Solenoid(ON/OFF)"\
"HOM[ :?]Home Switch     "\
"CMD[!:?]Command Mode    "\
"MLD[!:?]Enable Multiline"\
"SOD[!: ]Start Multiline "\
"EOD[!: ]End Multiline   "\
"NOP[!: ]Not implemented"


#define KEYWORDS \
"SYN" "ACK" "NAK" "SWV" "HWV" "GIT" "MEM" "SSN" "HLP" "FTL" "ALT" "WAR" "INF" \
"DBG" "LOG" "STC" "DVL" "LVL" "RST" "BLD" "STP" "LCS" "LCR" "NOW" "TIM" "TS1" \
"TS2" "TMP" "AMT" "AMH" "RED" "HSW" "H1S" "H1V" "H1P" "H1I" "H1D" "H2S" "H2V" \
"H2P" "H2I" "H2D" "PMS" "PSP" "PSI" "PSD" "PS1" "MUP" "MDN" "TMS" "TMR" "TRM" \
"SOL" "HOM" "CMD" "MLD" "SOD" "EOD" "NOP" 


enum keywordIndex {
_SYN_,_ACK_,_NAK_,_SWV_,_HWV_,_GIT_,_MEM_,_SSN_,_HLP_,_FTL_,_ALT_,_WAR_,_INF_,
_DBG_,_LOG_,_STC_,_DVL_,_LVL_,_RST_,_BLD_,_STP_,_LCS_,_LCR_,_NOW_,_TIM_,_TS1_,
_TS2_,_TMP_,_AMT_,_AMH_,_RED_,_HSW_,_H1S_,_H1V_,_H1P_,_H1I_,_H1D_,_H2S_,_H2V_,
_H2P_,_H2I_,_H2D_,_PMS_,_PSP_,_PSI_,_PSD_,_PS1_,_MUP_,_MDN_,_TMS_,_TMR_,_TRM_,
_SOL_,_HOM_,_CMD_,_MLD_,_SOD_,_EOD_,_NOP_};

// use enum to determine the size of the keyword arrays.
#define NKEYWORDS  _NOP_ + 1

#endif
